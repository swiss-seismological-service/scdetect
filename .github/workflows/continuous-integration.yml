# This workflow runs
#   - anytime new commits are added to the master branch
#   - pull requests with target "master" are supplied.
#
# It runs code linting and executes unittests.

name: continuous-integration


# on: push
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # The CMake build type (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  clang-format:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout scdetect
      uses: actions/checkout@v4
    - name: Install dependencies
      run: >
        sudo apt-get -y install
        clang-format-14
    - name: Run clang-format
      run: >
        find ${{github.workspace}}
        -type f \( -name '*.cpp' -o -name '*.ipp' -o -name '*.h' \) |
        xargs clang-format-14 --dry-run --Werror

  build:
    needs: clang-format
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout SeisComP/seiscomp
      uses: actions/checkout@v4
      with:
        repository: SeisComP/seiscomp
        path: seiscomp
    - name: Checkout SeisComP/common
      uses: actions/checkout@v4
      with:
        repository: SeisComP/common
        path: seiscomp/src/base/common
    - name: Checkout scdetect
      uses: actions/checkout@v4
      with:
        path: seiscomp/src/extras/scdetect

    - name: Install dependencies
      run: >
        sudo apt-get -y install
        libxml2-dev
        libboost-container-dev
        libboost-filesystem-dev
        libboost-iostreams-dev
        libboost-thread-dev
        libboost-program-options-dev
        libboost-regex-dev
        libboost-system-dev
        libboost-test-dev
        libboost-timer-dev
        libbson-dev
        libssl-dev
        libsqlite3-dev
        ccache

    - name: Prepare ccache timestamp
      id: get-ccache-timestamp
      run: |
        echo "timestamp=$(/bin/date -Iseconds -u)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache ccache files
      uses: actions/cache@v4
      with:
        path: ${{github.workspace}}/.ccache
        key: ${{runner.os}}-ccache-${{steps.get-ccache-timestamp.outputs.timestamp}}
        restore-keys: |
          ${{runner.os}}-ccache-

    - name: Configure CMake (generate project build system)
      run: >
        cmake
        -S ${{github.workspace}}/seiscomp
        -B build
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DCMAKE_INSTALL_PREFIX=$HOME/seiscomp
        -DSC_GLOBAL_PYTHON_WRAPPER=OFF
        -DSC_GLOBAL_PYTHON_WRAPPER_NUMPY=OFF
        -DSC_GLOBAL_GUI=OFF
        -DSC_ENABLE_CONTRIB=ON
        -DSC_TRUNK_DB_MYSQL=OFF
        -DSC_TRUNK_DB_POSTGRESQL=OFF
        -DSC_TRUNK_DB_SQLITE3=ON
        -DSCDETECT_CC_BUILD_BENCHMARKS=ON
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build and install project
      run: >
        export
        CCACHE_BASEDIR="${{github.workspace}}"
        CCACHE_DIR="${{github.workspace}}/.ccache"
        CCACHE_COMPRESS="true"
        CCACHE_COMPRESSLEVEL=6
        CCACHE_MAXSIZE=1G &&
        ccache -pz &&
        cmake
        --build build
        --config ${{env.BUILD_TYPE}}
        --parallel 14
        --target install &&
        ccache -ps

    - name: Run tests
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} -V -R 'test_scdetect_.*'
